#config_version=6

mode:
  priority: 9000
  start_events: balldevice_bd_trough_ball_count_changed{device.ball_devices.bd_trough.balls == 2}, startBonusPayOut # starts if both balls are in the trough
  stop_events: bonusPayoutDone, ball_save_ballOut_saving_ball #, mbFail # end when the last bonus is paid out
  use_wait_queue: true

queue_relay_player:
  ball_ending{device.ball_devices.bd_trough.balls == 2}:     # if multiball has failed because of a ball drain prior to hitting the "devil bumper"...
    post: payOutBonus  # eject the captured ball and...
    wait_for: bonusDone   # wait for it to drain

mode_settings:
#  display_delay_ms: 1300ms #length of time that the slide will display
  bonus_entries:
    - event: bonusPayout
      score: 0
      player_score_entry: current_player.contracts

timers:
  bonusCountDown:
    start_value: current_player.contracts # start with the current number of contracts collected and ...
    end_value: 0 # end at zero while ...
    direction: down # counting down at a ...
    tick_interval: 500ms # rate of once every half second
    debug: true
    control_events:
      - action: start # start when ...
        event: start_bonus_countdown # the mode begins and ...
      - action: stop # stop when ...
        event: bonusDone # the mode is done

###############################################################################################
#                                      PLAYERS                                                #
###############################################################################################

event_player:
  payOutBonus: start_bonus_countdown
  timer_bonusCountDown-tick{current_player.contracts==0}: # if the current player's contract value is zero ...
    - bonusDone # post the event bonusDone
  timer_bonusCountDown_complete: bonusDone
  timer_bonusCountDown_tick{current_player.contracts>0}: # if the current player's contract value is greater than zero ...
    - bonusPayout # pay out and...
    - light_done  # post the event light_done  mode_bonus_started: start_bonus_countdown

variable_player:
  timer_bonusCountDown_tick{current_player.contracts>0}:
    contracts: -1
    score: 1000 * (current_player.bonus_multiplier)
  payOutBonus:
    flag:
      int: 0
      action: set

sound_player:
  timer_bonusCountDown_tick{current_player.bonus_multiplier==1}: bonusPayout
  timer_bonusCountDown_tick{current_player.bonus_multiplier==2}: bonusPayout2
  timer_bonusCountDown_tick{current_player.bonus_multiplier==3}: bonusPayout3
  timer_bonusCountDown_tick{current_player.bonus_multiplier==4}: bonusPayout4

show_player:
  light_done{current_player.contracts==0}: 1000_off # use the value of light_done to drive the shows
  light_done{current_player.contracts==1}: 2000_off
  light_done{current_player.contracts==2}: 3000_off
  light_done{current_player.contracts==3}: 4000_off
  light_done{current_player.contracts==4}: 5000_off
  light_done{current_player.contracts==5}: 6000_off
  light_done{current_player.contracts==6}: 7000_off
  light_done{current_player.contracts==7}: 8000_off
  light_done{current_player.contracts==8}: 9000_off
  light_done{current_player.contracts==9}: 10000_off
